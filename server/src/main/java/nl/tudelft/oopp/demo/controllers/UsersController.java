package nl.tudelft.oopp.demo.controllers;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.List;

import nl.tudelft.oopp.demo.entities.ChangePassword;
import nl.tudelft.oopp.demo.entities.LoginUser;
import nl.tudelft.oopp.demo.entities.RegisterNewUser;
import nl.tudelft.oopp.demo.entities.Users;
import nl.tudelft.oopp.demo.repositories.UsersRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller // This means that this class is a Controller
public class UsersController {
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private UsersRepository usersRepository;

    /**
     * Registers a new user to the database.
     *
     * @param user - user to be registered
     * @return - true if user is added to the database,
     *         - false if there's already an user with the same netid
     */
    @PostMapping("/registerNewUser") // Map ONLY POST Requests
    public @ResponseBody
    boolean register(@RequestBody RegisterNewUser user) throws NoSuchAlgorithmException {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        try {
            if (!usersRepository.findUserByNetid(user.getNetid()).getNetid().isEmpty()) {
                return false;
            }
            return false;
        } catch (NullPointerException e) {
            Users newUser = new Users();
            newUser.setNetid(user.getNetid());
            newUser.setPassword(hashPassword(user.getPassword()));
            newUser.setRole(user.getRole());
            usersRepository.save(newUser);
            return true;
        }

    }

    /**
     * Verifies if the user is in the database.
     *
     * @param user - user to be verified
     * @return an empty string if authentication fails, the netid otherwise
     */
    @PostMapping("/loginUser") // Map ONLY POST Requests
    public @ResponseBody
    String login(@RequestBody LoginUser user) throws NoSuchAlgorithmException {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        String hashedPassword = hashPassword(user.getPassword());

        try {
            Users foundUser = usersRepository
                    .findUserByNetidAndPass(user.getNetid(), hashedPassword);
            String userJson =  "{\"netid\":\"" + foundUser.getNetid()
                    + "\",\"role\":\"" + foundUser.getRole() + "\"}";
            return userJson;
        } catch (NullPointerException e) {
            return "";
        }
    }

    @PostMapping("/changePassword")
    public @ResponseBody
    boolean changePassword(@RequestBody ChangePassword changePassword) throws NoSuchAlgorithmException {
        LoginUser loginUser = new LoginUser();
        loginUser.setNetid(changePassword.getNetId());
        loginUser.setPassword(changePassword.getOldPassword());
        String res = login(loginUser);
        if (res.equals("")) {
            return false;
        } else {
            String newHashedPassword = hashPassword(changePassword.getNewPassword());
            usersRepository.changePassword(changePassword.getNetId(), newHashedPassword);
        }
        return true;
    }

    @GetMapping("/allUsers")
    public @ResponseBody
    List<Users> getAllUsers() {
        // This returns a JSON or XML with the users
        return usersRepository.findAll();
    }

    /**
     * Hashes a password.
     *
     * @param password : plain text password
     * @return the hashed password
     * @throws NoSuchAlgorithmException if hashing algorithm is not found
     */
    public static String hashPassword(String password) throws NoSuchAlgorithmException {
        //hash password in SHA-256 into a byte array
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] passwordHash = digest.digest(
                password.getBytes(StandardCharsets.UTF_8));
        //transform byte arrays into strings
        String hashedPassword = bytesToHex(passwordHash);
        return hashedPassword;
    }

    /**
     * Helper function to turn bytes to hexadecimal.
     * @param hash : the byte array to be converted.
     * @return the string.
     */
    private static String bytesToHex(byte[] hash) {
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < hash.length; i++) {
            String hex = Integer.toHexString(0xff & hash[i]);
            if (hex.length() == 1) {
                hexString.append('0');
            }
            hexString.append(hex);
        }
        return hexString.toString();
    }

}


